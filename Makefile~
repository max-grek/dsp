# build args
SERVICE_NAME		?=	sync-service
VERSION			?=	latest
#REGISTRY
IMG			?=	$(REGISTRY)/$(SERVICE_NAME):$(VERSION)

# helpful things
CID 			?= 	$(shell docker ps --no-trunc -aqf name=$(SERVICE_NAME))
BUILD_TIME 		?= 	$(shell date -u +%Y-%m-%dT%H:%M:%SZ)
COMMIT_SHA 		?= 	$(shell git rev-parse HEAD)

DEFAULT_HOST		?= 0.0.0.0

# http args
HTTP_HOST		?= $(DEFAULT_HOST)
HTTP_PORT 		?= 9000
HTTP_TIMEOUT		?= 10s

# db args
DRIVER 			?= postgres
DB_HOST 		?= $(DEFAULT_HOST)
DB_PORT 		?= 5432
DB_USER 		?= 419cb2f2b0c998ab54bb89239eeda11b62a7a890aa60a9e9667e61129e3567b475a446
DB_PASSWORD		?= f465b453c874d624f1bfe8d0509f12770aa768bfd4824385701a2a7df2a984980a3c
DB_NAME 		?= amcdb_dev
DB_SCHEMA 		?= userdata
DB_MODE 		?= disable
DSN			?= $(DB_SCHEMA)://$(DB_USER):$(DB_PASSWORD)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)?sslmode=$(DB_MODE)

# docker args
D_DB_HOST 		?= 192.168.123.1
D_DB_PORT 		?= 5432

# secrets
SEC_SECRET		?= test

all: create run

.PHONY: all

# create binary file with race flag and specified name
create:
ifneq ("$(wildcard $(SERVICE_NAME))","")
	@rm -rf $(SERVICE_NAME) && go build -race -o $(SERVICE_NAME)
else
	@go build -race -o $(SERVICE_NAME)
endif

# run binary file
run:
	@./$(SERVICE_NAME) -host $(HTTP_HOST) -port $(HTTP_PORT) \
		-timeout $(HTTP_TIMEOUT) -db-driver $(DRIVER) \
		-db-host $(DB_HOST) -db-port $(DB_PORT) -db-user $(DB_USER) \
		-db-password $(DB_PASSWORD) -is-encrypted \
		-db-name $(DB_NAME) -db-schema $(DB_SCHEMA) \
		-db-mode $(DB_MODE)

test:
	@go test -count=1 -v -failfast ./...

local: test local-build local-start

# build docker container
local-build:
	@clear
	@echo "Building an image"
	@docker build -t $(IMG) --build-arg REGISTRY=$(REGISTRY) .

local-start:
	@clear
	@echo "Running container"
	@docker run --rm --name $(SERVICE_NAME) --network amc
		--ip 192.168.123.3 -p 9000:9000/tcp \ 
		-e SEC_SECRET=$(SEC_SECRET) $(IMG) -host $(HTTP_HOST) \
		-port $(HTTP_PORT) -timeout $(HTTP_TIMEOUT) \
		-db-driver $(DRIVER) -db-host $(D_DB_HOST) \
		-db-port $(D_DB_PORT)  -db-user $(DB_USER) \
		-db-password $(DB_PASSWORD) -is-encrypted -db-name $(DB_NAME) \
		-db-schema $(DB_SCHEMA) -db-mode $(DB_MODE) \

# run all containers at once
# if don't specify any directory for a volume: 
# docker creates an anonymous volume for that directory
# so --renew-anon-volumes is the way to remove all hidden data
local-env: local-env-stop local-env-start

local-env-start:
	@echo "Running all containers at once"
	@docker-compose up --renew-anon-volumes

# stop all containers
local-env-stop:
	@echo "Clean up all containers"
	@docker-compose down -v 2>&1

stop:
	@docker stop $(CID)

# build docker image
image:
	@docker build --no-cache -t $(IMG) \
           --build-arg BUILD_TIME=$(BUILD_TIME) \
           --build-arg COMMIT_SHA=$(COMMIT_SHA) \
           --build-arg VERSION=$(VERSION)       \
           --build-arg REGISTRY=$(REGISTRY)  \
           .

# push docker image
push: image
	docker push $(IMG)
